üé¨ Scenarios de Demostraci√≥n (Orden Recomendado)

  1Ô∏è‚É£ Scenario 1: Pedido Completo

  POST http://localhost:8080/api/demo/scenario-1-pedido-completo
  Qu√© hace:
  - Crea un nuevo pedido para cliente ID 200
  - Agrega 2x Teclado Mec√°nico + 1x Monitor 4K
  - Completa el pedido ‚Üí Dispara evento PedidoCompletado
  - El inventario reduce autom√°ticamente el stock

  Eventos: PedidoCompletado ‚Üí ReducirStock

  ---
  2Ô∏è‚É£ Scenario 2: Cancelar Pedido

  POST http://localhost:8080/api/demo/scenario-2-cancelar-pedido
  Qu√© hace:
  - Cancela el pedido pre-creado (ID: 1)
  - Dispara evento PedidoCancelado
  - No afecta el inventario (l√≥gica de negocio)

  Eventos: PedidoCancelado ‚Üí Sin acci√≥n de inventario

  ---
  3Ô∏è‚É£ Scenario 3: Stock Bajo

  POST http://localhost:8080/api/demo/scenario-3-stock-bajo
  Qu√© hace:
  - Crea pedido con 10x Webcam HD
  - Reduce stock de 12 ‚Üí 2 (por debajo del m√≠nimo de 3)
  - Dispara cadena de eventos: PedidoCompletado ‚Üí StockBajo
  - Genera alerta de reposici√≥n autom√°tica

  Eventos: PedidoCompletado ‚Üí ReducirStock ‚Üí StockBajo

  ---
  üîÑ Orden Recomendado de Pruebas

  # 1. Verificar estado inicial
  curl http://localhost:8080/api/demo/status

  # 2. Probar pedido completo (funcionalidad b√°sica)
  curl -X POST http://localhost:8080/api/demo/scenario-1-pedido-completo

  # 3. Verificar cambios en inventario
  curl http://localhost:8080/api/demo/status

  # 4. Probar cancelaci√≥n
  curl -X POST http://localhost:8080/api/demo/scenario-2-cancelar-pedido

  # 5. Probar alertas de stock bajo
  curl -X POST http://localhost:8080/api/demo/scenario-3-stock-bajo

  # 6. Verificar estado final
  curl http://localhost:8080/api/demo/status

  ---
  üõ† Endpoints Adicionales

  H2 Database Console

  http://localhost:8080/h2-console
  - JDBC URL: jdbc:h2:mem:testdb
  - User: sa
  - Password: (vac√≠o)

  Spring Boot Actuator

  GET http://localhost:8080/actuator
  GET http://localhost:8080/actuator/health
  GET http://localhost:8080/actuator/modulith